'use strict';

/**
 * Simple request module
 */
var rq = {
  /**
   * Builds a URI-encoded query string from an object
   * @param {Object} form Formatted `{field: value}`
   * @returns {String} Concatenated and URI endoded string of paramenters
   */
  encodeForm: function encodeForm() {
    var form = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return Object.keys(form).map(function (key) {
      return [key, form[key]].map(encodeURIComponent).join('=');
    }).join('&');
  },
  /**
   * Simple GET request to url, returns a promise
   * @param {String} url
   * @param {Object} form Form data appended to url as form encoded query strings
   * @returns {Promise} Response body (parsed as JSON if application/json content-type detected)
   */
  get: function get(url, form) {
    return new Promise(function (resolve, reject) {
      var xhr = new window.XMLHttpRequest();
      form = rq.encodeForm(form);
      xhr.open('get', url + '?' + form, true);
      xhr.responseType = 'json';

      xhr.onload = function () {
        if (xhr.status === 200 || xhr.status === 304) {
          resolve(xhr.response);
        } else {
          reject(new Error(xhr.status));
        }
      };
      xhr.onerror = function () {
        return reject(new Error('XMLHttpRequest Error: ' + xhr.statusText));
      };
      xhr.send();
    });
  },
  /**
   * Simple POST request to url, returns a promise
   * @param {String} url
   * @param {Object} form Form data appended to url as form encoded query strings
   * @returns {Promise} Response body (parsed as JSON if application/json content-type detected)
   */
  post: function post(url, form) {
    return new Promise(function (resolve, reject) {
      var xhr = new window.XMLHttpRequest();
      form = rq.encodeForm(form);
      xhr.open('POST', url, true);
      xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
      xhr.setRequestHeader('Content-length', form.length);
      xhr.setRequestHeader('Connection', 'close');

      xhr.onload = function () {
        if (xhr.status === 200 || xhr.status === 304) {
          resolve(xhr.response);
        } else {
          reject(new Error(xhr.status));
        }
      };
      xhr.onerror = function () {
        return reject(new Error('XMLHttpRequest Error: ' + xhr.statusText));
      };

      xhr.send(form);
    });
  }
};

module.exports = rq;